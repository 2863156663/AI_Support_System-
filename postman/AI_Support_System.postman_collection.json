{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "AI Support System API Tests",
		"description": "Postman collection for testing AI Support System API endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Health Check",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						""
					]
				},
				"description": "Basic health check endpoint to verify service is running"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('status');",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData).to.have.property('timestamp');",
							"    pm.expect(jsonData).to.have.property('version');",
							"});",
							"",
							"pm.test(\"Status is healthy\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql('healthy');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Get System Status",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/status",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"status"
					]
				},
				"description": "Get detailed system status information"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('status');",
							"    pm.expect(jsonData).to.have.property('environment');",
							"    pm.expect(jsonData).to.have.property('server_info');",
							"});",
							"",
							"pm.test(\"Server info is present\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.server_info).to.have.property('host');",
							"    pm.expect(jsonData.server_info).to.have.property('port');",
							"    pm.expect(jsonData.server_info).to.have.property('debug');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Test Endpoint",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/test",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"test"
					]
				},
				"description": "Test endpoint with sample data"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has test data\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('test_data');",
							"    pm.expect(jsonData.test_data).to.have.property('string');",
							"    pm.expect(jsonData.test_data).to.have.property('number');",
							"    pm.expect(jsonData.test_data).to.have.property('boolean');",
							"    pm.expect(jsonData.test_data).to.have.property('array');",
							"});",
							"",
							"pm.test(\"Test data values are correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.test_data.string).to.eql('Hello World');",
							"    pm.expect(jsonData.test_data.number).to.eql(42);",
							"    pm.expect(jsonData.test_data.boolean).to.eql(true);",
							"    pm.expect(jsonData.test_data.array).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Echo POST Request",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"message\": \"Hello from Postman\",\n    \"data\": {\n        \"user_id\": 123,\n        \"action\": \"test\",\n        \"timestamp\": \"2024-01-01T00:00:00Z\"\n    }\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/echo",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"echo"
					]
				},
				"description": "Test POST request with JSON data"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has echo message\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData).to.have.property('received_data');",
							"    pm.expect(jsonData).to.have.property('timestamp');",
							"});",
							"",
							"pm.test(\"Echo message is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql('Echo received');",
							"});",
							"",
							"pm.test(\"Received data matches sent data\", function () {",
							"    const jsonData = pm.response.json();",
							"    const sentData = pm.request.body.raw;",
							"    pm.expect(jsonData.received_data).to.deep.equal(JSON.parse(sentData));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Error Handling - 404",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/nonexistent",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"nonexistent"
					]
				},
				"description": "Test 404 error handling"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Error response format is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData).to.have.property('status_code');",
							"    pm.expect(jsonData.status_code).to.eql(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set base URL if not already set",
					"if (!pm.environment.get('base_url')) {",
					"    pm.environment.set('base_url', 'http://localhost:5000');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test to check response time",
					"pm.test(\"Response time is less than 2000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);",
					"});",
					"",
					"// Global test to check content type",
					"pm.test(\"Content-Type is application/json\", function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:5000",
			"type": "string"
		}
	]
}
